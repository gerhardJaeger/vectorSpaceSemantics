<<<<<<< HEAD
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e7ec79cc",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['figure.figsize'] = [10, 10]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6281ad8b",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    " # Vector space semantics\n",
    "\n",
    "## Session 01: Introduction\n",
    "\n",
    "### Gerhard Jäger\n",
    "\n",
    "\n",
    "\n",
    "April 25, 2022"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51b2645e",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# What is meaning?\n",
    "\n",
    " Semantics is the branch of linguistics dealing with meaning. But what is meaning?\n",
    " \n",
    "> \"In order to say what a meaning *is*, we may first ask what a meaning *does*, and then find something that does that.\" \n",
    ">\n",
    "> (David Lewis, 1976, General semantics. In: Montague grammar. Academic Press, 1976. S. 1-50.)\n",
    " \n",
    " \n",
    " Broadly speaking, there are three philosophical conceptions of the nature of meanings:\n",
    " \n",
    " - truth-conditional semantics\n",
    " - cognitive semantics\n",
    " - usage-based semantics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff9cfbe7",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Truth-conditional semantics\n",
    "\n",
    "Max Cresswell\n",
    "\n",
    "> \"Most Certain Principle: For two sentences $\\alpha$ and $\\beta$, if $\\alpha$ is true and $\\beta$ is false, $\\alpha$ and $\\beta$ must have different meanings.\"\n",
    ">\n",
    "> (Cresswell, M. J. 1982. The autonomy of semantics. In Stanley Peters & Esa Saarinen (eds.), Processes,\n",
    "beliefs, and questions, 69–86. Reidel.)\n",
    "\n",
    "Truth-conditional semantics strengthens this to a *Less certain principle*: \n",
    "\n",
    "*If $\\alpha$ and $\\beta$ have the same truth conditions, they have the same meaning.*\n",
    "\n",
    "This is very close to the prevalent notion of meaning in formal logic. *Formal semantics* starts from the less certain principle plus the *Principle of compositionality*:\n",
    "\n",
    "*The meaning of a complex expression is determined by the meaning of its parts and the way they are combined.*\n",
    "\n",
    "The focus of research in formal semantics is on the composition part, while the meanings of individual words are treated as black box."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c39ee9b2",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<img src=\"_img/carlson.png\">"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "456ec480",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Cognitive semantics\n",
    "\n",
    "Cognitive semantics, simply speaking, assumes that *meanings are in the head*. This turns semantics into a branch of psychology and perhaps neuro-science.\n",
    "\n",
    "A major challenge for cognitive semantics is to give **identity criteria** for meanings. It stands to reason that a prolific author has a different conception of *book* than somebody who rarely reads. Still, we would probably want to insist that there is a inter-subjective meaning of that word &ndash; the kind of information you would find in a dictionary &ndash;, which is accessible to both people.\n",
    "\n",
    "Most cognitivist approaches identify meanings with positions in an association network."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0871ae64",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<img src=\"_img/radialNetwork.svg\" height=\"500\">"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "784b47e0",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<img src=\"_img/frame.svg\" height=\"500\">"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ec361f1",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Usage-based semantics\n",
    "\n",
    "- **\"Die Bedeutung eines Wortes liegt in seinem Gebrauch\"** (Ludwig Wittgenstein, Philosophical Investigations)\n",
    "\n",
    "\n",
    "- **\"You shall know a word by the company it keeps!\"** (J. R. Firth, A synopsis of linguistic theory 1930–55. In Studies in linguistic analysis, pages 1–32. The Philological Society, Oxford)\n",
    "\n",
    "\n",
    "- **\"What people know when they say that they know a word is not how to recite its dictionary definition &ndash; they know how to use it [...] in everyday discourse.\"** (Miller, George A. (1986). Dictionaries in the mind. Language and Cognitive Processes, 1, 171–185.)\n",
    "\n",
    "\n",
    "- **Distributional hypothesis: difference of meaning correlates with difference of distribution** (Zellig Harris)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c41834e",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## What is the meaning of *bardiwac*?\n",
    "\n",
    "Can we infer meaning from usage?\n",
    "\n",
    "- He handed her her glass of <font color='red'>bardiwac</font>.\n",
    "\n",
    "- Beef dishes are made to complement the <font color='red'>bardiwac</font>s.\n",
    "\n",
    "- Nigel staggered to his feet, face flushed from too much <font color='red'>bardiwac</font>.\n",
    "\n",
    "- Malbec, one of the lesser-known <font color='red'>bardiwac</font> grapes, responds well to Australia's sunshine.\n",
    "\n",
    "- I dined off bread and cheese and this excellent <font color='red'>bardiwac</font>.\n",
    "\n",
    "- The drinks were delicious: blood-red <font color='red'>bardiwac</font> as well as light, sweet Rhenish."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fda2284",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## What is the meaning of *bardiwac*?\n",
    "\n",
    "Can we infer meaning from usage?\n",
    "\n",
    "- He handed her her glass of <font color='olive'>claret</font>.\n",
    "\n",
    "- Beef dishes are made to complement the <font color='olive'>claret</font>s.\n",
    "\n",
    "- Nigel staggered to his feet, face flushed from too much <font color='olive'>claret</font>.\n",
    "\n",
    "- Malbec, one of the lesser-known <font color='olive'>claret</font> grapes, responds well to Australia's sunshine.\n",
    "\n",
    "- I dined off bread and cheese and this excellent <font color='olive'>claret</font>.\n",
    "\n",
    "- The drinks were delicious: blood-red <font color='olive'>claret</font> as well as light, sweet Rhenish.\n",
    "\n",
    "\n",
    "(example from http://wordspace.collocations.de/doku.php/course:esslli2021:start)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83d9be9f",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Usage-based semantics\n",
    "\n",
    "- *vector space semantics* is a version of usage-based semantics\n",
    "\n",
    "- strengths of this approach:\n",
    "   - gradient notion of semantic similarity\n",
    "   - principled approach how meanings can be learned\n",
    "\n",
    "- challenges:\n",
    "   - predict what meanings do (remember the Lewis quotation above)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6a535fb",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Desiderata for a theory of meaning\n",
    "\n",
    "## meaning relations\n",
    "\n",
    "### synonymy\n",
    "\n",
    "- *buy* – *purchase*\n",
    "\n",
    "- *sick* – *ill*\n",
    "\n",
    "- *cell phone* – *mobile phone*\n",
    "\n",
    "\n",
    "### hyponomy\n",
    "\n",
    "- *fir* – *conifer*\n",
    "- *beetle* – *insect*\n",
    "- *water* – *liquid*\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78ae40fd",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### antonymy\n",
    "\n",
    "- *small* – *large*\n",
    "- *thick* – *thin*\n",
    "- *rich* – *poor*\n",
    "\n",
    "### semantic complementarity\n",
    "\n",
    "- *even* – *odd*\n",
    "- *unmarried* – *married*\n",
    "- *on* – *off*\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13e49f7d",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "\n",
    "### homonymy\n",
    "\n",
    "- *bank* (financial institution – edge of a river)\n",
    "- *band* (ribbon – group of musicians)\n",
    "- *bow* (weapon to shoot projectiles – kind of tied ribbon)\n",
    "\n",
    "### polysemy\n",
    "\n",
    "- *bank* (financial institution – building where the institution has a branch – entirety of employees of the financial institution)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e30f0722",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## connotations\n",
    "\n",
    "cultural and/or emotional associations carried by an expression, over and above its descriptive meaning\n",
    "\n",
    "- *strong-willed* – *pig-headed*\n",
    "\n",
    "- *childish* – *youthful*\n",
    "\n",
    "- *skinny* – *lithe* – *thin*\n",
    "\n",
    "\n",
    "## social meaning\n",
    "\n",
    "- *I loved **surprising** you with Clint Eastwood.*\n",
    "- *I loved **surprisin'** you with Clint Eastwood.*\n",
    "\n",
    "first version sounds more sophisticated\n",
    "\n",
    "- *truck* – *lorry*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea3709e2",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Plan for the course\n",
    "\n",
    "- today: introduction\n",
    "- 05/02: from corpora to word vectors\n",
    "- 05/07: Latent semantic analysis and dimensionality reduction\n",
    "- 05/16: other geometric accounts\n",
    "- 05/23: vector embeddings via deep learning\n",
    "- 05/30: vector embeddings via deep learning\n",
    "- 06/13: behavioral validations\n",
    "- 06/20: student presentation\n",
    "- 06/27: student presentation\n",
    "- 07/04: student presentation\n",
    "- 07/11: student presentation\n",
    "- 07/18: student presentation\n",
    "- 07/25: wrapping up"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ef189f0",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Student projects\n",
    "\n",
    "- groups of 3-5 students\n",
    "- presentation in class\n",
    "- if you want 6 CP: write-up during the semester break\n",
    "- ideally: combination of theoretical considerations and programming project\n",
    "\n",
    "## Possible topics\n",
    "\n",
    "- ambiguity and sense disambiguation in vector space semantics\n",
    "- meaning vectors and quantum logic\n",
    "- compositionality of meaning vectors\n",
    "- multilingual word embeddings\n",
    "- historical word embeddings\n",
    "- ELMO, BERT, GPT3 etc."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0525a5eb",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## A thought experiment: deciphering hieroglyphs\n",
    "\n",
    "<img src=\"_img/hieroglyphs01.svg\" width = \"1700\">\n",
    "\n",
    "\n",
    "(example from http://wordspace.collocations.de/doku.php/course:esslli2021:start)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0cb69d9",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## A thought experiment: deciphering hieroglyphs\n",
    "\n",
    "<img src=\"_img/hieroglyphs02.svg\" width = \"1600\">\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "581d1f70",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## A thought experiment: deciphering hieroglyphs\n",
    "\n",
    "<img src=\"_img/hieroglyphs03.svg\" width = \"1600\">\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b212e00",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## A thought experiment: deciphering hieroglyphs\n",
    "\n",
    "<img src=\"_img/hieroglyphs04.svg\" width = \"1600\">\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aac937d7",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## A thought experiment: deciphering hieroglyphs\n",
    "\n",
    "<img src=\"_img/hieroglyphs05.svg\" width = \"1600\">\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d9d64aeb",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "M = pd.DataFrame(\n",
    "    np.array([\n",
    "        [51, 20, 84, 0, 3, 0],\n",
    "        [52, 58, 4, 4, 6, 26],\n",
    "        [115, 83, 10, 42, 33, 17],\n",
    "        [59, 39, 23, 4, 0, 0],\n",
    "        [98, 14, 6, 2, 1, 0],\n",
    "        [12, 17, 3, 2, 9, 27],\n",
    "        [11, 2, 2, 0, 18, 0]\n",
    "    ]),\n",
    "    ['knife', 'cat', 'dog', 'boat', 'cup', 'pig', 'banana'],\n",
    "    ['get', 'see', 'use', 'hear', 'eat', 'kill']\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66012b4d",
   "metadata": {},
   "source": [
    "**co-occurrence matrix** $M$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6ba1bfe9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>get</th>\n",
       "      <th>see</th>\n",
       "      <th>use</th>\n",
       "      <th>hear</th>\n",
       "      <th>eat</th>\n",
       "      <th>kill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>knife</th>\n",
       "      <td>51</td>\n",
       "      <td>20</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cat</th>\n",
       "      <td>52</td>\n",
       "      <td>58</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dog</th>\n",
       "      <td>115</td>\n",
       "      <td>83</td>\n",
       "      <td>10</td>\n",
       "      <td>42</td>\n",
       "      <td>33</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>boat</th>\n",
       "      <td>59</td>\n",
       "      <td>39</td>\n",
       "      <td>23</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cup</th>\n",
       "      <td>98</td>\n",
       "      <td>14</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pig</th>\n",
       "      <td>12</td>\n",
       "      <td>17</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>banana</th>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        get  see  use  hear  eat  kill\n",
       "knife    51   20   84     0    3     0\n",
       "cat      52   58    4     4    6    26\n",
       "dog     115   83   10    42   33    17\n",
       "boat     59   39   23     4    0     0\n",
       "cup      98   14    6     2    1     0\n",
       "pig      12   17    3     2    9    27\n",
       "banana   11    2    2     0   18     0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1feecc90",
   "metadata": {},
   "source": [
    "- row-vector $x_{\\textrm{dog}}$ describes usage of the word *dog* in the corpus"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3a77e244",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>get</th>\n",
       "      <th>see</th>\n",
       "      <th>use</th>\n",
       "      <th>hear</th>\n",
       "      <th>eat</th>\n",
       "      <th>kill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dog</th>\n",
       "      <td>115</td>\n",
       "      <td>83</td>\n",
       "      <td>10</td>\n",
       "      <td>42</td>\n",
       "      <td>33</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     get  see  use  hear  eat  kill\n",
       "dog  115   83   10    42   33    17"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M[2:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8626cda8",
   "metadata": {},
   "source": [
    "- can be seen as coordinates of point in $n$-dimensional Euclidean space"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b816fcef",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Illustrated for dimensions *get* and *use*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f77bf7ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import cm\n",
    "import string\n",
    "cmap = cm.get_cmap('Spectral')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f6eeee4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>get</th>\n",
       "      <th>use</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>knife</th>\n",
       "      <td>51</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cat</th>\n",
       "      <td>52</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dog</th>\n",
       "      <td>115</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>boat</th>\n",
       "      <td>59</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       get  use\n",
       "knife   51   84\n",
       "cat     52    4\n",
       "dog    115   10\n",
       "boat    59   23"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M1 = M[['get','use']][:4]\n",
    "M1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e2d4b48f",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 120.0)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "M1[['get', 'use']].plot('get', 'use', \n",
    "                        kind='scatter', \n",
    "                        ax=ax, s=120, linewidth=0, c=range(len(M1)), colormap=cmap)\n",
    "for k, v in M1[['get', 'use']].iterrows():\n",
    "    ax.annotate(k, v,\n",
    "                xytext=(10,-5),\n",
    "                textcoords='offset points', \n",
    "                family='sans-serif', \n",
    "                fontsize=18, \n",
    "                color='black')\n",
    "plt.xlim([0,130])\n",
    "plt.ylim([0,120])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afc3f6b9",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Spatial proximity is expected to correspond to semantic similarity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1c42f475",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "63.28506932918696"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.spatial import distance\n",
    "\n",
    "distance.euclidean(M1.loc['dog'].values, M1.loc['cat'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d7f56946",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "57.48912940721924"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance.euclidean(M1.loc['dog'].values, M1.loc['boat'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7ae2958c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "97.83659846908007"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance.euclidean(M1.loc['dog'].values, M1.loc['knife'].values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ff23606",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "This doesn't work too well here because the position of a word depends on its frequency of occurrence, which affects the Euclidean distance.\n",
    "\n",
    "Other distance measure give better results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e3bf17d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.9664625849099586e-05"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance.cosine(M1.loc['dog'].values, M1.loc['cat'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c7a6477c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.04033008494512802"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance.cosine(M1.loc['dog'].values, M1.loc['boat'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d97b2367",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.408923003765172"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance.cosine(M1.loc['dog'].values, M1.loc['knife'].values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4524b4a5",
   "metadata": {},
   "source": [
    "<img src=_img/vectors.svg>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef3fcd04",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Some lighthearted info about BERT and relatives\n",
    "\n",
    "https://www.youtube.com/watch?v=-QH8fRhqFHM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "de2fcc7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mkdir: cannot create directory ‘../data’: File exists\r\n"
     ]
    }
   ],
   "source": [
    "!mkdir ../data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ab4ad959",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2022-04-24 20:15:57--  https://unitc-my.sharepoint.com/:x:/g/personal/nwsja01_cloud_uni-tuebingen_de/ESJ8QyqzmxpInK_jMQvQ_LEB9XoRbcw39rFmM6ZAQjrwvA?e=Pyrd4b?download\n",
      "Resolving unitc-my.sharepoint.com (unitc-my.sharepoint.com)... 13.107.138.9, 13.107.136.9\n",
      "Connecting to unitc-my.sharepoint.com (unitc-my.sharepoint.com)|13.107.138.9|:443... connected.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: https://unitc-my.sharepoint.com/personal/nwsja01_cloud_uni-tuebingen_de/_layouts/15/Doc.aspx?sourcedoc=%7B2a437c22-9bb3-481a-9caf-e3310bd0fcb1%7D&action=default&slrid=67ef36a0-f040-3000-ee9a-a3068674ddff&originalPath=aHR0cHM6Ly91bml0Yy1teS5zaGFyZXBvaW50LmNvbS86eDovZy9wZXJzb25hbC9ud3NqYTAxX2Nsb3VkX3VuaS10dWViaW5nZW5fZGUvRVNKOFF5cXpteHBJbktfak1RdlFfTEVCOVhvUmJjdzM5ckZtTTZaQVFqcnd2QT9ydGltZT1wV1l0ZXg0bTJrZw&cid=37b3dc74-73a3-42bc-95b2-147be9670616 [following]\n",
      "--2022-04-24 20:15:58--  https://unitc-my.sharepoint.com/personal/nwsja01_cloud_uni-tuebingen_de/_layouts/15/Doc.aspx?sourcedoc=%7B2a437c22-9bb3-481a-9caf-e3310bd0fcb1%7D&action=default&slrid=67ef36a0-f040-3000-ee9a-a3068674ddff&originalPath=aHR0cHM6Ly91bml0Yy1teS5zaGFyZXBvaW50LmNvbS86eDovZy9wZXJzb25hbC9ud3NqYTAxX2Nsb3VkX3VuaS10dWViaW5nZW5fZGUvRVNKOFF5cXpteHBJbktfak1RdlFfTEVCOVhvUmJjdzM5ckZtTTZaQVFqcnd2QT9ydGltZT1wV1l0ZXg0bTJrZw&cid=37b3dc74-73a3-42bc-95b2-147be9670616\n",
      "Reusing existing connection to unitc-my.sharepoint.com:443.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 76788 (75K) [text/html]\n",
      "Saving to: ‘../data/Reviews.csv’\n",
      "\n",
      "../data/Reviews.csv 100%[===================>]  74.99K  --.-KB/s    in 0.06s   \n",
      "\n",
      "2022-04-24 20:15:58 (1.24 MB/s) - ‘../data/Reviews.csv’ saved [76788/76788]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://unitc-my.sharepoint.com/:x:/g/personal/nwsja01_cloud_uni-tuebingen_de/ESJ8QyqzmxpInK_jMQvQ_LEB9XoRbcw39rFmM6ZAQjrwvA?e=Pyrd4b?download -O ../data/Reviews.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cbd533dd",
   "metadata": {
    "scrolled": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>ProductId</th>\n",
       "      <th>UserId</th>\n",
       "      <th>ProfileName</th>\n",
       "      <th>HelpfulnessNumerator</th>\n",
       "      <th>HelpfulnessDenominator</th>\n",
       "      <th>Score</th>\n",
       "      <th>Time</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>B001E4KFG0</td>\n",
       "      <td>A3SGXH7AUHU8GW</td>\n",
       "      <td>delmartian</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1303862400</td>\n",
       "      <td>Good Quality Dog Food</td>\n",
       "      <td>I have bought several of the Vitality canned d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>B00813GRG4</td>\n",
       "      <td>A1D87F6ZCVE5NK</td>\n",
       "      <td>dll pa</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1346976000</td>\n",
       "      <td>Not as Advertised</td>\n",
       "      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>B000LQOCH0</td>\n",
       "      <td>ABXLMWJIXXAIN</td>\n",
       "      <td>Natalia Corres \"Natalia Corres\"</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1219017600</td>\n",
       "      <td>\"Delight\" says it all</td>\n",
       "      <td>This is a confection that has been around a fe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>B000UA0QIQ</td>\n",
       "      <td>A395BORC6FGVXV</td>\n",
       "      <td>Karl</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1307923200</td>\n",
       "      <td>Cough Medicine</td>\n",
       "      <td>If you are looking for the secret ingredient i...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>B006K2ZZ7K</td>\n",
       "      <td>A1UQRSCLF8GW1T</td>\n",
       "      <td>Michael D. Bigham \"M. Wassir\"</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1350777600</td>\n",
       "      <td>Great taffy</td>\n",
       "      <td>Great taffy at a great price.  There was a wid...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568449</th>\n",
       "      <td>568450</td>\n",
       "      <td>B001EO7N10</td>\n",
       "      <td>A28KG5XORO54AY</td>\n",
       "      <td>Lettie D. Carter</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1299628800</td>\n",
       "      <td>Will not do without</td>\n",
       "      <td>Great for sesame chicken..this is a good if no...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568450</th>\n",
       "      <td>568451</td>\n",
       "      <td>B003S1WTCU</td>\n",
       "      <td>A3I8AFVPEE8KI5</td>\n",
       "      <td>R. Sawyer</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1331251200</td>\n",
       "      <td>disappointed</td>\n",
       "      <td>I'm disappointed with the flavor. The chocolat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568451</th>\n",
       "      <td>568452</td>\n",
       "      <td>B004I613EE</td>\n",
       "      <td>A121AA1GQV751Z</td>\n",
       "      <td>pksd \"pk_007\"</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1329782400</td>\n",
       "      <td>Perfect for our maltipoo</td>\n",
       "      <td>These stars are small, so you can give 10-15 o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568452</th>\n",
       "      <td>568453</td>\n",
       "      <td>B004I613EE</td>\n",
       "      <td>A3IBEVCTXKNOH</td>\n",
       "      <td>Kathy A. Welch \"katwel\"</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1331596800</td>\n",
       "      <td>Favorite Training and reward treat</td>\n",
       "      <td>These are the BEST treats for training and rew...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568453</th>\n",
       "      <td>568454</td>\n",
       "      <td>B001LR2CU2</td>\n",
       "      <td>A3LGQPJCZVL9UC</td>\n",
       "      <td>srfell17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1338422400</td>\n",
       "      <td>Great Honey</td>\n",
       "      <td>I am very satisfied ,product is as advertised,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>568454 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Id   ProductId          UserId                      ProfileName  \\\n",
       "0            1  B001E4KFG0  A3SGXH7AUHU8GW                       delmartian   \n",
       "1            2  B00813GRG4  A1D87F6ZCVE5NK                           dll pa   \n",
       "2            3  B000LQOCH0   ABXLMWJIXXAIN  Natalia Corres \"Natalia Corres\"   \n",
       "3            4  B000UA0QIQ  A395BORC6FGVXV                             Karl   \n",
       "4            5  B006K2ZZ7K  A1UQRSCLF8GW1T    Michael D. Bigham \"M. Wassir\"   \n",
       "...        ...         ...             ...                              ...   \n",
       "568449  568450  B001EO7N10  A28KG5XORO54AY                 Lettie D. Carter   \n",
       "568450  568451  B003S1WTCU  A3I8AFVPEE8KI5                        R. Sawyer   \n",
       "568451  568452  B004I613EE  A121AA1GQV751Z                    pksd \"pk_007\"   \n",
       "568452  568453  B004I613EE   A3IBEVCTXKNOH          Kathy A. Welch \"katwel\"   \n",
       "568453  568454  B001LR2CU2  A3LGQPJCZVL9UC                         srfell17   \n",
       "\n",
       "        HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n",
       "0                          1                       1      5  1303862400   \n",
       "1                          0                       0      1  1346976000   \n",
       "2                          1                       1      4  1219017600   \n",
       "3                          3                       3      2  1307923200   \n",
       "4                          0                       0      5  1350777600   \n",
       "...                      ...                     ...    ...         ...   \n",
       "568449                     0                       0      5  1299628800   \n",
       "568450                     0                       0      2  1331251200   \n",
       "568451                     2                       2      5  1329782400   \n",
       "568452                     1                       1      5  1331596800   \n",
       "568453                     0                       0      5  1338422400   \n",
       "\n",
       "                                   Summary  \\\n",
       "0                    Good Quality Dog Food   \n",
       "1                        Not as Advertised   \n",
       "2                    \"Delight\" says it all   \n",
       "3                           Cough Medicine   \n",
       "4                              Great taffy   \n",
       "...                                    ...   \n",
       "568449                 Will not do without   \n",
       "568450                        disappointed   \n",
       "568451            Perfect for our maltipoo   \n",
       "568452  Favorite Training and reward treat   \n",
       "568453                         Great Honey   \n",
       "\n",
       "                                                     Text  \n",
       "0       I have bought several of the Vitality canned d...  \n",
       "1       Product arrived labeled as Jumbo Salted Peanut...  \n",
       "2       This is a confection that has been around a fe...  \n",
       "3       If you are looking for the secret ingredient i...  \n",
       "4       Great taffy at a great price.  There was a wid...  \n",
       "...                                                   ...  \n",
       "568449  Great for sesame chicken..this is a good if no...  \n",
       "568450  I'm disappointed with the flavor. The chocolat...  \n",
       "568451  These stars are small, so you can give 10-15 o...  \n",
       "568452  These are the BEST treats for training and rew...  \n",
       "568453  I am very satisfied ,product is as advertised,...  \n",
       "\n",
       "[568454 rows x 10 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "\n",
    "df = pd.read_csv(\"../data/Reviews.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fa91c233",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         I have bought several of the Vitality canned d...\n",
       "1         Product arrived labeled as Jumbo Salted Peanut...\n",
       "2         This is a confection that has been around a fe...\n",
       "3         If you are looking for the secret ingredient i...\n",
       "4         Great taffy at a great price.  There was a wid...\n",
       "                                ...                        \n",
       "568449    Great for sesame chicken..this is a good if no...\n",
       "568450    I'm disappointed with the flavor. The chocolat...\n",
       "568451    These stars are small, so you can give 10-15 o...\n",
       "568452    These are the BEST treats for training and rew...\n",
       "568453    I am very satisfied ,product is as advertised,...\n",
       "Name: Text, Length: 568454, dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "dab58b60",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_92025/3942760636.py:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  wordlists = np.array([np.array(nltk.tokenize.word_tokenize(s)) for s in df.Text])\n"
     ]
    }
   ],
   "source": [
    "wordlists = np.array([np.array(nltk.tokenize.word_tokenize(s)) for s in df.Text])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "5ecc5a56",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "freq_dist = nltk.FreqDist()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "08cea87d",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "for sentence in wordlists:\n",
    "    for w in sentence:\n",
    "        freq_dist[w.lower()] += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "67107367",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['i', 'have', 'bought', ..., 'corn-belt', 'dainties.', 'lofted'],\n",
       "      dtype='<U157')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocabulary = np.array(list(freq_dist.keys()))\n",
    "vocabulary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "ad16fa83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "208533"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(vocabulary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "67ea43d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "tdMtx = np.zeros((5000, len(wordlists)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "d81e729b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('.', 2401903),\n",
       " ('the', 1869066),\n",
       " (',', 1743456),\n",
       " ('i', 1685832),\n",
       " ('and', 1285762),\n",
       " ('a', 1216491),\n",
       " ('it', 1063213),\n",
       " ('to', 1012799),\n",
       " ('of', 801189),\n",
       " ('is', 751219),\n",
       " ('>', 681651),\n",
       " ('<', 679904),\n",
       " ('this', 672697),\n",
       " ('/', 649150),\n",
       " ('br', 647088),\n",
       " ('for', 551645),\n",
       " ('in', 544189),\n",
       " ('my', 463257),\n",
       " ('that', 452877),\n",
       " ('!', 430915),\n",
       " ('but', 375649),\n",
       " ('you', 367789),\n",
       " ('have', 355288),\n",
       " ('with', 352616),\n",
       " ('not', 343267),\n",
       " ('was', 329371),\n",
       " ('are', 326743),\n",
       " ('they', 313906),\n",
       " (\"n't\", 298890),\n",
       " (\"'s\", 297026),\n",
       " ('as', 279595),\n",
       " ('on', 269340),\n",
       " ('so', 253988),\n",
       " ('like', 252912),\n",
       " ('these', 233671),\n",
       " (')', 216566),\n",
       " ('them', 208432),\n",
       " ('(', 201923),\n",
       " ('good', 197243),\n",
       " ('be', 188675),\n",
       " ('at', 179885),\n",
       " ('or', 178958),\n",
       " ('one', 174076),\n",
       " ('just', 172535),\n",
       " ('do', 170562),\n",
       " ('if', 169992),\n",
       " ('taste', 168334),\n",
       " ('very', 167244),\n",
       " ('great', 165349),\n",
       " ('coffee', 162814),\n",
       " ('all', 155813),\n",
       " ('product', 148349),\n",
       " ('from', 145701),\n",
       " ('can', 145479),\n",
       " ('we', 144913),\n",
       " (\"''\", 144336),\n",
       " ('flavor', 143938),\n",
       " ('when', 136262),\n",
       " ('tea', 135274),\n",
       " ('would', 135200),\n",
       " ('more', 134778),\n",
       " ('has', 133130),\n",
       " ('had', 128462),\n",
       " ('me', 127356),\n",
       " ('love', 127192),\n",
       " ('will', 126882),\n",
       " ('food', 125035),\n",
       " ('than', 114323),\n",
       " ('out', 114004),\n",
       " ('``', 111024),\n",
       " ('get', 108424),\n",
       " ('other', 107343),\n",
       " ('no', 107177),\n",
       " ('some', 103434),\n",
       " ('about', 102529),\n",
       " ('really', 100736),\n",
       " ('only', 99921),\n",
       " ('up', 98966),\n",
       " ('much', 92485),\n",
       " ('too', 92384),\n",
       " ('an', 90354),\n",
       " ('there', 88292),\n",
       " ('your', 88013),\n",
       " ('also', 86548),\n",
       " ('-', 85593),\n",
       " ('because', 85311),\n",
       " (\"'ve\", 85299),\n",
       " ('...', 84693),\n",
       " (':', 83956),\n",
       " ('were', 83417),\n",
       " ('little', 83335),\n",
       " ('amazon', 83253),\n",
       " ('use', 83067),\n",
       " ('what', 82193),\n",
       " ('time', 81697),\n",
       " ('which', 78577),\n",
       " ('did', 78105),\n",
       " ('she', 77775),\n",
       " ('he', 77701),\n",
       " ('been', 77277),\n",
       " ('buy', 76509),\n",
       " ('tried', 76035),\n",
       " ('best', 75896),\n",
       " ('even', 74832),\n",
       " ('price', 74329),\n",
       " (\"'m\", 73834),\n",
       " ('does', 73747),\n",
       " ('am', 73541),\n",
       " ('find', 73247),\n",
       " ('by', 72662),\n",
       " ('make', 71606),\n",
       " ('after', 70199),\n",
       " ('well', 69878),\n",
       " ('better', 69388),\n",
       " ('dog', 69093),\n",
       " ('now', 68938),\n",
       " ('try', 68267),\n",
       " ('eat', 66962),\n",
       " ('any', 66538),\n",
       " ('first', 61621),\n",
       " ('their', 61594),\n",
       " ('water', 59705),\n",
       " ('chocolate', 59337),\n",
       " ('our', 58601),\n",
       " ('her', 57519),\n",
       " ('could', 57182),\n",
       " ('bag', 56594),\n",
       " ('then', 56095),\n",
       " ('used', 54083),\n",
       " ('found', 53916),\n",
       " ('sugar', 53149),\n",
       " ('again', 52059),\n",
       " ('?', 51953),\n",
       " ('cup', 50935),\n",
       " ('drink', 50303),\n",
       " ('sweet', 50239),\n",
       " ('made', 49851),\n",
       " ('bought', 49786),\n",
       " ('box', 49278),\n",
       " ('think', 49034),\n",
       " ('way', 48647),\n",
       " ('two', 48382),\n",
       " ('since', 46307),\n",
       " ('who', 46134),\n",
       " ('over', 46084),\n",
       " ('day', 46065),\n",
       " ('tastes', 45370),\n",
       " ('still', 45354),\n",
       " ('&', 44581),\n",
       " ('--', 44169),\n",
       " ('go', 44162),\n",
       " ('store', 44149),\n",
       " ('most', 43979),\n",
       " ('order', 43451),\n",
       " ('know', 43341),\n",
       " ('got', 43189),\n",
       " ('give', 42742),\n",
       " ('bit', 42615),\n",
       " ('recommend', 42579),\n",
       " ('many', 42134),\n",
       " ('2', 41822),\n",
       " (\"'re\", 41575),\n",
       " ('$', 41382),\n",
       " ('nice', 41167),\n",
       " ('delicious', 40590),\n",
       " ('into', 40023),\n",
       " ('how', 39757),\n",
       " ('favorite', 39743),\n",
       " ('want', 39424),\n",
       " ('before', 39285),\n",
       " ('never', 39181),\n",
       " ('flavors', 38499),\n",
       " ('mix', 38405),\n",
       " ('something', 38375),\n",
       " ('every', 38339),\n",
       " ('ca', 38220),\n",
       " ('few', 38100),\n",
       " ('free', 37925),\n",
       " ('hot', 37540),\n",
       " ('dogs', 37316),\n",
       " ('cat', 37299),\n",
       " ('brand', 36988),\n",
       " ('always', 36557),\n",
       " ('without', 36467),\n",
       " ('stuff', 36454),\n",
       " (';', 36453),\n",
       " ('loves', 36430),\n",
       " ('same', 36273),\n",
       " ('years', 36081),\n",
       " ('while', 35961),\n",
       " ('makes', 35813),\n",
       " ('say', 35733),\n",
       " ('treats', 35724),\n",
       " ('lot', 35536),\n",
       " (\"'ll\", 35281),\n",
       " ('add', 35194),\n",
       " ('right', 35111),\n",
       " ('healthy', 34825),\n",
       " ('its', 34719),\n",
       " ('less', 34548),\n",
       " ('chips', 34430),\n",
       " ('ingredients', 34343),\n",
       " ('different', 34293),\n",
       " ('organic', 33908),\n",
       " ('quality', 33712),\n",
       " ('enough', 33689),\n",
       " ('milk', 33549),\n",
       " ('however', 33547),\n",
       " ('small', 33469),\n",
       " ('back', 33210),\n",
       " ('3', 32586),\n",
       " ('perfect', 32529),\n",
       " ('ever', 32337),\n",
       " ('ordered', 32314),\n",
       " ('keep', 32184),\n",
       " ('his', 32020),\n",
       " ('snack', 31994),\n",
       " ('here', 31986),\n",
       " ('strong', 31846),\n",
       " ('eating', 31652),\n",
       " ('bad', 31469),\n",
       " ('using', 31392),\n",
       " ('sure', 31366),\n",
       " ('old', 31127),\n",
       " ('need', 31052),\n",
       " ('though', 30916),\n",
       " ('put', 30882),\n",
       " ('easy', 30615),\n",
       " ('products', 30357),\n",
       " ('green', 29944),\n",
       " ('treat', 29869),\n",
       " ('hard', 29678),\n",
       " ('whole', 29619),\n",
       " ('enjoy', 29551),\n",
       " ('fresh', 29463),\n",
       " ('salt', 29439),\n",
       " ('long', 29380),\n",
       " ('pack', 29254),\n",
       " ('bags', 29241),\n",
       " ('see', 29219),\n",
       " ('definitely', 29195),\n",
       " ('buying', 29132),\n",
       " ('off', 29054),\n",
       " ('those', 28926),\n",
       " ('oil', 28802),\n",
       " ('regular', 28704),\n",
       " ('thing', 28633),\n",
       " ('thought', 28556),\n",
       " ('cookies', 28236),\n",
       " ('down', 28175),\n",
       " ('both', 28159),\n",
       " ('each', 27984),\n",
       " ('far', 27977),\n",
       " ('being', 27972),\n",
       " ('chicken', 27805),\n",
       " ('high', 27632),\n",
       " ('pretty', 27523),\n",
       " ('natural', 27295),\n",
       " ('local', 27080),\n",
       " ('size', 27058),\n",
       " ('work', 27058),\n",
       " (\"'d\", 27050),\n",
       " ('happy', 26934),\n",
       " ('take', 26893),\n",
       " ('actually', 26831),\n",
       " ('looking', 26755),\n",
       " ('cats', 26713),\n",
       " ('another', 26248),\n",
       " ('should', 26208),\n",
       " ('people', 26207),\n",
       " ('*', 26206),\n",
       " ('5', 26142),\n",
       " ('big', 26133),\n",
       " ('going', 26031),\n",
       " ('new', 25883),\n",
       " ('package', 25852),\n",
       " ('through', 25692),\n",
       " ('1', 25487),\n",
       " ('tasty', 25402),\n",
       " ('him', 25276),\n",
       " ('diet', 25177),\n",
       " ('quite', 25110),\n",
       " ('last', 25110),\n",
       " ('shipping', 24780),\n",
       " ('%', 24778),\n",
       " ('4', 24528),\n",
       " ('may', 24460),\n",
       " ('real', 24456),\n",
       " ('sauce', 24365),\n",
       " ('almost', 24326),\n",
       " ('foods', 24226),\n",
       " ('butter', 24147),\n",
       " ('wonderful', 24000),\n",
       " ('highly', 23972),\n",
       " ('calories', 23928),\n",
       " ('feel', 23817),\n",
       " ('around', 23772),\n",
       " ('per', 23392),\n",
       " ('bars', 23279),\n",
       " ('anything', 23226),\n",
       " ('purchase', 23216),\n",
       " ('tasted', 23215),\n",
       " ('purchased', 23186),\n",
       " ('dry', 23117),\n",
       " ('excellent', 22813),\n",
       " ('worth', 22748),\n",
       " ('texture', 22485),\n",
       " (\"'\", 22297),\n",
       " ('expensive', 22040),\n",
       " ('trying', 21754),\n",
       " ('year', 21684),\n",
       " ('amount', 21574),\n",
       " ('protein', 21520),\n",
       " ('smell', 21482),\n",
       " ('having', 21370),\n",
       " ('fat', 21355),\n",
       " ('own', 21333),\n",
       " ('rice', 21307),\n",
       " ('stores', 21191),\n",
       " ('coconut', 21142),\n",
       " ('tasting', 21096),\n",
       " ('getting', 21056),\n",
       " ('dark', 21052),\n",
       " ('said', 21023),\n",
       " ('probably', 20726),\n",
       " ('grocery', 20710),\n",
       " ('half', 20670),\n",
       " ('several', 20524),\n",
       " ('came', 20512),\n",
       " ('low', 20480),\n",
       " ('kind', 20458),\n",
       " ('morning', 20431),\n",
       " ('things', 20294),\n",
       " ('once', 20248),\n",
       " ('usually', 20209),\n",
       " ('brands', 20205),\n",
       " ('bottle', 19992),\n",
       " ('away', 19969),\n",
       " ('vanilla', 19961),\n",
       " ('fruit', 19957),\n",
       " ('added', 19871),\n",
       " ('come', 19870),\n",
       " ('loved', 19656),\n",
       " ('family', 19532),\n",
       " ('might', 19521),\n",
       " ('received', 19507),\n",
       " ('blend', 19496),\n",
       " ('full', 19456),\n",
       " ('days', 19123),\n",
       " ('seems', 19076),\n",
       " ('6', 19037),\n",
       " ('months', 18936),\n",
       " ('problem', 18812),\n",
       " ('reviews', 18782),\n",
       " ('three', 18753),\n",
       " ('cereal', 18746),\n",
       " ('where', 18711),\n",
       " ('wo', 18653),\n",
       " ('company', 18651),\n",
       " ('us', 18638),\n",
       " ('why', 18527),\n",
       " ('case', 18458),\n",
       " ('home', 18411),\n",
       " ('health', 18275),\n",
       " ('until', 18271),\n",
       " ('candy', 18196),\n",
       " ('black', 18164),\n",
       " ('bar', 18139),\n",
       " ('comes', 18078),\n",
       " ('nothing', 17770),\n",
       " ('money', 17589),\n",
       " ('light', 17565),\n",
       " ('making', 17535),\n",
       " ('flavored', 17464),\n",
       " ('review', 17408),\n",
       " ('drinking', 17382),\n",
       " ('peanut', 17316),\n",
       " ('especially', 17266),\n",
       " ('large', 17257),\n",
       " ('look', 17156),\n",
       " ('instead', 17095),\n",
       " ('gluten', 17091),\n",
       " ('able', 17047),\n",
       " ('such', 17031),\n",
       " ('arrived', 17007),\n",
       " ('..', 16748),\n",
       " ('kids', 16709),\n",
       " ('available', 16689),\n",
       " ('maybe', 16687),\n",
       " ('times', 16637),\n",
       " ('least', 16523),\n",
       " ('top', 16480),\n",
       " ('item', 16441),\n",
       " ('bitter', 16377),\n",
       " ('husband', 16367),\n",
       " ('stars', 16347),\n",
       " ('http', 16306),\n",
       " ('variety', 16290),\n",
       " ('disappointed', 16176),\n",
       " ('ones', 16032),\n",
       " ('extra', 15998),\n",
       " ('corn', 15979),\n",
       " ('beans', 15886),\n",
       " ('href=', 15873),\n",
       " ('/a', 15873),\n",
       " ('fact', 15872),\n",
       " ('packaging', 15869),\n",
       " ('save', 15757),\n",
       " ('decided', 15678),\n",
       " ('cheese', 15642),\n",
       " ('next', 15541),\n",
       " ('fine', 15533),\n",
       " ('started', 15506),\n",
       " ('honey', 15492),\n",
       " ('others', 15488),\n",
       " ('absolutely', 15480),\n",
       " ('boxes', 15473),\n",
       " ('gave', 15344),\n",
       " ('teas', 15282),\n",
       " ('popcorn', 15243),\n",
       " ('went', 15236),\n",
       " ('prefer', 15230),\n",
       " ('either', 15224),\n",
       " ('smooth', 15143),\n",
       " ('....', 15127),\n",
       " ('recommended', 15125),\n",
       " ('deal', 15116),\n",
       " ('liked', 15078),\n",
       " ('wish', 15032),\n",
       " ('couple', 14995),\n",
       " ('house', 14964),\n",
       " ('oz', 14910),\n",
       " ('energy', 14846),\n",
       " ('let', 14772),\n",
       " ('cream', 14651),\n",
       " ('works', 14567),\n",
       " ('seem', 14554),\n",
       " ('wanted', 14544),\n",
       " ('cheaper', 14495),\n",
       " ('breakfast', 14431),\n",
       " ('cups', 14398),\n",
       " ('minutes', 14381),\n",
       " ('although', 14362),\n",
       " ('baby', 14351),\n",
       " ('roast', 14310),\n",
       " ('cost', 14310),\n",
       " ('ago', 14246),\n",
       " ('meal', 14186),\n",
       " ('10', 14166),\n",
       " ('open', 14162),\n",
       " ('took', 14126),\n",
       " ('read', 13947),\n",
       " ('yet', 13931),\n",
       " ('white', 13891),\n",
       " ('plus', 13761),\n",
       " ('quickly', 13731),\n",
       " ('syrup', 13706),\n",
       " ('juice', 13668),\n",
       " ('powder', 13631),\n",
       " ('rich', 13565),\n",
       " ('longer', 13558),\n",
       " ('cans', 13484),\n",
       " ('help', 13379),\n",
       " ('must', 13348),\n",
       " ('else', 13247),\n",
       " ('bold', 13236),\n",
       " ('bread', 13155),\n",
       " ('meat', 13148),\n",
       " ('serving', 13143),\n",
       " ('12', 13140),\n",
       " ('ordering', 13135),\n",
       " ('myself', 13099),\n",
       " ('pieces', 13056),\n",
       " ('amazing', 13050),\n",
       " ('red', 13015),\n",
       " ('anyone', 12955),\n",
       " ('rather', 12891),\n",
       " ('soft', 12880),\n",
       " ('keurig', 12872),\n",
       " ('cookie', 12819),\n",
       " ('fast', 12755),\n",
       " ('month', 12746),\n",
       " ('everything', 12663),\n",
       " ('k-cups', 12598),\n",
       " ('weight', 12470),\n",
       " ('week', 12367),\n",
       " ('spicy', 12247),\n",
       " ('glad', 12213),\n",
       " ('fan', 12210),\n",
       " ('quick', 12108),\n",
       " ('soup', 12100),\n",
       " ('side', 12045),\n",
       " ('second', 11962),\n",
       " ('mouth', 11848),\n",
       " ('sometimes', 11802),\n",
       " ('likes', 11707),\n",
       " ('everyone', 11697),\n",
       " ('plastic', 11497),\n",
       " ('son', 11464),\n",
       " ('starbucks', 11442),\n",
       " ('pasta', 11410),\n",
       " ('gift', 11391),\n",
       " ('difference', 11362),\n",
       " ('beef', 11309),\n",
       " ('tell', 11300),\n",
       " ('ginger', 11269),\n",
       " ('hair', 11226),\n",
       " ('cinnamon', 11191),\n",
       " ('part', 11139),\n",
       " ('crunchy', 11003),\n",
       " ('friends', 10988),\n",
       " ('potato', 10901),\n",
       " ('mixed', 10901),\n",
       " ('opened', 10896),\n",
       " ('etc', 10886),\n",
       " ('value', 10885),\n",
       " ('believe', 10880),\n",
       " ('says', 10872),\n",
       " ('wheat', 10861),\n",
       " ('problems', 10835),\n",
       " ('jerky', 10782),\n",
       " ('feed', 10768),\n",
       " ('type', 10765),\n",
       " ('thank', 10748),\n",
       " ('canned', 10743),\n",
       " ('brew', 10733),\n",
       " ('ice', 10728),\n",
       " ('gets', 10726),\n",
       " ('overall', 10701),\n",
       " ('life', 10683),\n",
       " ('cold', 10663),\n",
       " ('end', 10637),\n",
       " ('100', 10610),\n",
       " ('goes', 10580),\n",
       " ('dried', 10549),\n",
       " ('market', 10503),\n",
       " ('online', 10496),\n",
       " ('reason', 10457),\n",
       " ('often', 10446),\n",
       " ('slightly', 10418),\n",
       " ('version', 10394),\n",
       " ('giving', 10390),\n",
       " ('teeth', 10385),\n",
       " ('thanks', 10358),\n",
       " ('pet', 10326),\n",
       " ('easily', 10286),\n",
       " ('8', 10276),\n",
       " ('super', 10267),\n",
       " ('nuts', 10242),\n",
       " ('chew', 10204),\n",
       " ('enjoyed', 10178),\n",
       " ('fiber', 10169),\n",
       " ('weeks', 10150),\n",
       " ('artificial', 10129),\n",
       " ('care', 10126),\n",
       " ('formula', 10105),\n",
       " ('start', 10095),\n",
       " ('container', 10085),\n",
       " ('salty', 10058),\n",
       " ('brown', 10052),\n",
       " ('machine', 10037),\n",
       " ('cooking', 10036),\n",
       " ('smaller', 10027),\n",
       " ('yummy', 9987),\n",
       " ('cut', 9975),\n",
       " ('daughter', 9975),\n",
       " ('left', 9963),\n",
       " ('guess', 9954),\n",
       " ('french', 9917),\n",
       " ('snacks', 9826),\n",
       " ('k-cup', 9825),\n",
       " ('soy', 9812),\n",
       " ('vet', 9690),\n",
       " ('course', 9678),\n",
       " ('drinks', 9669),\n",
       " ('plain', 9659),\n",
       " ('place', 9658),\n",
       " ('blue', 9633),\n",
       " ('recipe', 9610),\n",
       " ('ok', 9592),\n",
       " ('awesome', 9586),\n",
       " ('exactly', 9553),\n",
       " ('ingredient', 9533),\n",
       " ('similar', 9518),\n",
       " ('night', 9518),\n",
       " ('four', 9492),\n",
       " ('bowl', 9486),\n",
       " ('choice', 9431),\n",
       " ('recently', 9413),\n",
       " ('between', 9405),\n",
       " ('spice', 9385),\n",
       " ('coffees', 9378),\n",
       " ('wife', 9377),\n",
       " ('oatmeal', 9361),\n",
       " ('clean', 9354),\n",
       " ('alternative', 9327),\n",
       " ('single', 9325),\n",
       " ('lemon', 9285),\n",
       " ('original', 9273),\n",
       " ('daily', 9255),\n",
       " ('surprised', 9177),\n",
       " ('simply', 9155),\n",
       " ('yes', 9141),\n",
       " ('aroma', 9131),\n",
       " ('cocoa', 9123),\n",
       " ('pleased', 9106),\n",
       " ('wrong', 9105),\n",
       " ('crackers', 9100),\n",
       " ('pay', 9064),\n",
       " ('special', 9057),\n",
       " ('decaf', 9052),\n",
       " ('ate', 9046),\n",
       " ('past', 9013),\n",
       " ('flour', 9013),\n",
       " ('during', 9006),\n",
       " ('aftertaste', 8972),\n",
       " ('smells', 8964),\n",
       " ('line', 8964),\n",
       " ('hand', 8956),\n",
       " ('sodium', 8946),\n",
       " ('list', 8937),\n",
       " ('looks', 8929),\n",
       " ('contains', 8929),\n",
       " ('compared', 8926),\n",
       " ('friend', 8879),\n",
       " ('pods', 8874),\n",
       " ('color', 8865),\n",
       " ('body', 8863),\n",
       " ('caffeine', 8857),\n",
       " ('cook', 8856),\n",
       " ('saw', 8800),\n",
       " ('finally', 8784),\n",
       " ('almonds', 8781),\n",
       " ('close', 8775),\n",
       " ('picky', 8766),\n",
       " ('someone', 8732),\n",
       " ('inside', 8731),\n",
       " ('mild', 8720),\n",
       " ('run', 8708),\n",
       " ('jar', 8707),\n",
       " ('subscribe', 8702),\n",
       " ('huge', 8701),\n",
       " ('itself', 8700),\n",
       " ('already', 8691),\n",
       " ('hope', 8680),\n",
       " ('heat', 8634),\n",
       " ('experience', 8622),\n",
       " ('change', 8615),\n",
       " ('noticed', 8603),\n",
       " ('feeding', 8599),\n",
       " ('ground', 8557),\n",
       " ('hours', 8552),\n",
       " ('chip', 8532),\n",
       " ('flavorful', 8528),\n",
       " ('looked', 8522),\n",
       " ('stick', 8517),\n",
       " ('stomach', 8514),\n",
       " ('apple', 8498),\n",
       " ('due', 8460),\n",
       " ('along', 8439),\n",
       " ('service', 8389),\n",
       " ('pepper', 8387),\n",
       " ('idea', 8377),\n",
       " ('helps', 8363),\n",
       " ('unfortunately', 8316),\n",
       " ('orange', 8307),\n",
       " ('gone', 8302),\n",
       " ('live', 8297),\n",
       " ('packs', 8266),\n",
       " ('needed', 8219),\n",
       " ('fish', 8171),\n",
       " ('soda', 8157),\n",
       " ('expected', 8150),\n",
       " ('cake', 8144),\n",
       " ('given', 8141),\n",
       " ('later', 8140),\n",
       " ('delivery', 8137),\n",
       " ('adding', 8106),\n",
       " ('date', 8096),\n",
       " ('gum', 8076),\n",
       " ('bite', 8072),\n",
       " ('leave', 8066),\n",
       " ('lots', 8065),\n",
       " ('please', 8062),\n",
       " ('larger', 8022),\n",
       " ('espresso', 7990),\n",
       " ('20', 7973),\n",
       " ('instant', 7949),\n",
       " ('leaves', 7947),\n",
       " ('soon', 7922),\n",
       " ('bottles', 7920),\n",
       " ('completely', 7913),\n",
       " ('star', 7895),\n",
       " ('done', 7882),\n",
       " ('seeds', 7863),\n",
       " ('bulk', 7835),\n",
       " ('it.', 7829),\n",
       " ('convenient', 7817),\n",
       " ('raw', 7816),\n",
       " ('fantastic', 7813),\n",
       " ('continue', 7810),\n",
       " ('noodles', 7799),\n",
       " ('skin', 7780),\n",
       " ('grain', 7771),\n",
       " ('iced', 7751),\n",
       " ('bottom', 7736),\n",
       " ('medium', 7731),\n",
       " ('takes', 7730),\n",
       " ('gives', 7701),\n",
       " ('needs', 7697),\n",
       " ('weak', 7669),\n",
       " ('cheap', 7667),\n",
       " ('extremely', 7580),\n",
       " ('packaged', 7544),\n",
       " ('mind', 7531),\n",
       " ('rest', 7505),\n",
       " ('expect', 7501),\n",
       " ('eaten', 7460),\n",
       " ('mine', 7448),\n",
       " ('label', 7417),\n",
       " ('chewy', 7397),\n",
       " ('pot', 7390),\n",
       " ('wellness', 7387),\n",
       " ('packages', 7384),\n",
       " ('healthier', 7383),\n",
       " ('shipped', 7351),\n",
       " ('excited', 7296),\n",
       " ('stock', 7292),\n",
       " ('chai', 7292),\n",
       " ('within', 7288),\n",
       " ('name', 7280),\n",
       " ('ounce', 7275),\n",
       " ('true', 7249),\n",
       " ('granola', 7247),\n",
       " ('told', 7242),\n",
       " ('certainly', 7220),\n",
       " ('taking', 7214),\n",
       " ('seemed', 7213),\n",
       " ('doing', 7211),\n",
       " ('based', 7209),\n",
       " ('glass', 7199),\n",
       " ('filling', 7154),\n",
       " ('waste', 7150),\n",
       " ('issues', 7140),\n",
       " ('packets', 7136),\n",
       " ('twice', 7128),\n",
       " ('sold', 7126),\n",
       " ('maker', 7126),\n",
       " ('grams', 7080),\n",
       " ('five', 7052),\n",
       " ('items', 7043),\n",
       " ('normal', 7037),\n",
       " ('note', 7020),\n",
       " ('entire', 7006),\n",
       " ('sent', 6989),\n",
       " ('contain', 6960),\n",
       " ('crunch', 6942),\n",
       " ('opinion', 6929),\n",
       " ('packet', 6898),\n",
       " ('carry', 6865),\n",
       " ('thick', 6858),\n",
       " ('calorie', 6839),\n",
       " ('point', 6836),\n",
       " ('anyway', 6833),\n",
       " ('eats', 6817),\n",
       " ('wait', 6811),\n",
       " ('1/2', 6763),\n",
       " ('called', 6759),\n",
       " ('content', 6756),\n",
       " ('pound', 6753),\n",
       " ('hint', 6733),\n",
       " ('stop', 6731),\n",
       " ('today', 6729),\n",
       " ('sweetness', 6724),\n",
       " ('under', 6719),\n",
       " ('purchasing', 6696),\n",
       " ('almond', 6687),\n",
       " ('world', 6685),\n",
       " ('puppy', 6680),\n",
       " ('baking', 6609),\n",
       " ('normally', 6598),\n",
       " ('seen', 6581),\n",
       " ('liquid', 6576),\n",
       " ('mountain', 6573),\n",
       " ('lunch', 6566),\n",
       " ('15', 6547),\n",
       " ('olive', 6515),\n",
       " ('together', 6513),\n",
       " ('stash', 6509),\n",
       " ('reading', 6504),\n",
       " ('bean', 6499),\n",
       " ('easier', 6460),\n",
       " ('creamy', 6424),\n",
       " ('break', 6424),\n",
       " ('particular', 6421),\n",
       " ('vitamin', 6420),\n",
       " ('50', 6413),\n",
       " ('difficult', 6391),\n",
       " ('christmas', 6383),\n",
       " ('pop', 6381),\n",
       " ('truly', 6377),\n",
       " ('pure', 6376),\n",
       " ('delivered', 6373),\n",
       " ('unless', 6350),\n",
       " ('tiny', 6347),\n",
       " ('dinner', 6326),\n",
       " ('become', 6309),\n",
       " ('keeps', 6293),\n",
       " ('sale', 6285),\n",
       " ('decent', 6252),\n",
       " ('benefits', 6246),\n",
       " ('stopped', 6228),\n",
       " ('mint', 6166),\n",
       " ('customer', 6161),\n",
       " ('yourself', 6155),\n",
       " ('worked', 6110),\n",
       " ('lower', 6108),\n",
       " ('varieties', 6090),\n",
       " ('loose', 6079),\n",
       " ('batch', 6070),\n",
       " ('sweetener', 6062),\n",
       " ('licorice', 6058),\n",
       " ('oh', 6056),\n",
       " ('consistency', 6053),\n",
       " ('remember', 6050),\n",
       " ('7', 6048),\n",
       " ('24', 6018),\n",
       " ('total', 6004),\n",
       " ('addition', 5998),\n",
       " ('tuna', 5996),\n",
       " ('stay', 5981),\n",
       " ('none', 5980),\n",
       " ('30', 5980),\n",
       " ('immediately', 5979),\n",
       " ('discovered', 5977),\n",
       " ('whatever', 5950),\n",
       " ('vinegar', 5947),\n",
       " ('simple', 5945),\n",
       " ('packed', 5944),\n",
       " ('results', 5936),\n",
       " ('nutrition', 5932),\n",
       " ('stevia', 5932),\n",
       " ('means', 5914),\n",
       " ('salmon', 5913),\n",
       " ('hit', 5903),\n",
       " ('sour', 5888),\n",
       " ('set', 5884),\n",
       " ('totally', 5875),\n",
       " ('anymore', 5861),\n",
       " ('chili', 5859),\n",
       " ('felt', 5854),\n",
       " ('baked', 5849),\n",
       " ('refreshing', 5818),\n",
       " ('piece', 5807),\n",
       " ('seller', 5794),\n",
       " ('throw', 5788),\n",
       " ('including', 5777),\n",
       " ('brewed', 5759),\n",
       " ('[', 5756),\n",
       " ('okay', 5749),\n",
       " (']', 5749),\n",
       " ('crazy', 5747),\n",
       " ('thinking', 5744),\n",
       " ('person', 5743),\n",
       " ('training', 5724),\n",
       " ('fun', 5716),\n",
       " ('salad', 5716),\n",
       " ('shop', 5714),\n",
       " ('stale', 5702),\n",
       " ('toy', 5702),\n",
       " ('garlic', 5682),\n",
       " ('perhaps', 5673),\n",
       " ('call', 5666),\n",
       " ('description', 5644),\n",
       " ('finding', 5630),\n",
       " ('spices', 5615),\n",
       " ('recipes', 5613),\n",
       " ('broken', 5603),\n",
       " ('nut', 5600),\n",
       " ('seasoning', 5599),\n",
       " ('option', 5596),\n",
       " ('matter', 5580),\n",
       " ('thin', 5574),\n",
       " ('caramel', 5563),\n",
       " ('microwave', 5562),\n",
       " ('pleasant', 5540),\n",
       " ('wet', 5533),\n",
       " ('check', 5513),\n",
       " ('finish', 5509),\n",
       " ('area', 5505),\n",
       " ('shipment', 5493),\n",
       " ('substitute', 5456),\n",
       " ('higher', 5453),\n",
       " ('mostly', 5446),\n",
       " ('unlike', 5445),\n",
       " ('anywhere', 5431),\n",
       " ('combination', 5424),\n",
       " ('stronger', 5418),\n",
       " ('serve', 5417),\n",
       " ('pod', 5417),\n",
       " ('sell', 5414),\n",
       " ('locally', 5410),\n",
       " ('dish', 5408),\n",
       " ('feeling', 5404),\n",
       " ('plan', 5403),\n",
       " ('cooked', 5399),\n",
       " ('issue', 5385),\n",
       " ('cherry', 5378),\n",
       " ('source', 5377),\n",
       " ('nearly', 5372),\n",
       " ('supposed', 5367),\n",
       " ('clear', 5358),\n",
       " ('website', 5335),\n",
       " ('blood', 5334),\n",
       " ('newman', 5319),\n",
       " ('turned', 5317),\n",
       " ('bland', 5304),\n",
       " ('perfectly', 5301),\n",
       " ('notice', 5289),\n",
       " ('double', 5284),\n",
       " ('k', 5267),\n",
       " ('changed', 5262),\n",
       " ('pick', 5259),\n",
       " ('amazon.com', 5259),\n",
       " ('research', 5247),\n",
       " ('satisfying', 5243),\n",
       " ('acid', 5233),\n",
       " ('except', 5233),\n",
       " ('otherwise', 5220),\n",
       " ('yogurt', 5220),\n",
       " ('wow', 5215),\n",
       " ('horrible', 5204),\n",
       " ('sort', 5202),\n",
       " ('somewhat', 5187),\n",
       " ('touch', 5179),\n",
       " ('six', 5166),\n",
       " ('bring', 5156),\n",
       " ('short', 5142),\n",
       " ('reasonable', 5117),\n",
       " ('kitchen', 5099),\n",
       " ('hoping', 5045),\n",
       " ('warm', 5041),\n",
       " ('pill', 5038),\n",
       " ('prices', 5029),\n",
       " ('bones', 5025),\n",
       " ('pumpkin', 5024),\n",
       " ('brewing', 5024),\n",
       " ('allergies', 5019),\n",
       " ('mixes', 5017),\n",
       " ('avoid', 5003),\n",
       " ('strawberry', 4998),\n",
       " ('individual', 4996),\n",
       " ('expecting', 4992),\n",
       " ('mom', 4987),\n",
       " ('uses', 4984),\n",
       " ('condition', 4974),\n",
       " ('nutritional', 4969),\n",
       " ('pricey', 4966),\n",
       " ('mess', 4965),\n",
       " ('reviewers', 4949),\n",
       " ('roasted', 4945),\n",
       " ('awful', 4937),\n",
       " ('grains', 4921),\n",
       " ('number', 4907),\n",
       " ('hour', 4899),\n",
       " ('terrible', 4876),\n",
       " ('ready', 4869),\n",
       " ('cause', 4868),\n",
       " ('carbs', 4861),\n",
       " ('balance', 4861),\n",
       " ('listed', 4858),\n",
       " ('beat', 4853),\n",
       " ('chewing', 4852),\n",
       " ('reviewer', 4849),\n",
       " ('drinker', 4847),\n",
       " ('hooked', 4846),\n",
       " ('supermarket', 4844),\n",
       " ('gluten-free', 4826),\n",
       " ('fairly', 4826),\n",
       " ('near', 4822),\n",
       " ('heavy', 4819),\n",
       " ('sticks', 4819),\n",
       " ('moist', 4795),\n",
       " ('future', 4793),\n",
       " ('impressed', 4789),\n",
       " ('favorites', 4785),\n",
       " ('premium', 4771),\n",
       " ('return', 4757),\n",
       " ('china', 4753),\n",
       " ('switched', 4743),\n",
       " ('mean', 4741),\n",
       " ('flavoring', 4741),\n",
       " ('hands', 4735),\n",
       " ('italian', 4729),\n",
       " ('important', 4726),\n",
       " ('hazelnut', 4720),\n",
       " ('kick', 4718),\n",
       " ('forward', 4717),\n",
       " ('satisfied', 4715),\n",
       " ('sick', 4711),\n",
       " ...]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_dist.most_common(5000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a95c96f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python3_vss",
   "language": "python",
   "name": "python3_vss"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
=======
{"cells":[{"metadata":{"slideshow":{"slide_type":"skip"},"trusted":true},"id":"e7ec79cc","cell_type":"code","source":"import matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [10, 10]","execution_count":null,"outputs":[]},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"6281ad8b","cell_type":"markdown","source":" # Vector space semantics\n\n## Session 01: Introduction\n\n### Gerhard Jäger\n\n\n\nApril 25, 2022"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"51b2645e","cell_type":"markdown","source":"# What is meaning?\n\n Semantics is the branch of linguistics dealing with meaning. But what is meaning?\n \n> \"In order to say what a meaning *is*, we may first ask what a meaning *does*, and then find something that does that.\" \n>\n> (David Lewis, 1976, General semantics. In: Montague grammar. Academic Press, 1976. S. 1-50.)\n \n \n Broadly speaking, there are three philosophical conceptions of the nature of meanings:\n \n - truth-conditional semantics\n - cognitive semantics\n - usage-based semantics"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"ff9cfbe7","cell_type":"markdown","source":"## Truth-conditional semantics\n\nMax Cresswell\n\n> \"Most Certain Principle: For two sentences $\\alpha$ and $\\beta$, if $\\alpha$ is true and $\\beta$ is false, $\\alpha$ and $\\beta$ must have different meanings.\"\n>\n> (Cresswell, M. J. 1982. The autonomy of semantics. In Stanley Peters & Esa Saarinen (eds.), Processes,\nbeliefs, and questions, 69–86. Reidel.)\n\nTruth-conditional semantics strengthens this to a *Less certain principle*: \n\n*If $\\alpha$ and $\\beta$ have the same truth conditions, they have the same meaning.*\n\nThis is very close to the prevalent notion of meaning in formal logic. *Formal semantics* starts from the less certain principle plus the *Principle of compositionality*:\n\n*The meaning of a complex expression is determined by the meaning of its parts and the way they are combined.*\n\nThe focus of research in formal semantics is on the composition part, while the meanings of individual words are treated as black box."},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"c39ee9b2","cell_type":"markdown","source":"<img src=\"_img/carlson.png\">"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"456ec480","cell_type":"markdown","source":"## Cognitive semantics\n\nCognitive semantics, simply speaking, assumes that *meanings are in the head*. This turns semantics into a branch of psychology and perhaps neuro-science.\n\nA major challenge for cognitive semantics is to give **identity criteria** for meanings. It stands to reason that a prolific author has a different conception of *book* than somebody who rarely reads. Still, we would probably want to insist that there is a inter-subjective meaning of that word &ndash; the kind of information you would find in a dictionary &ndash;, which is accessible to both people.\n\nMost cognitivist approaches identify meanings with positions in an association network."},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"0871ae64","cell_type":"markdown","source":"<img src=\"_img/radialNetwork.svg\" height=\"500\">"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"784b47e0","cell_type":"markdown","source":"<img src=\"_img/frame.svg\" height=\"500\">"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"5ec361f1","cell_type":"markdown","source":"## Usage-based semantics\n\n- **\"Die Bedeutung eines Wortes liegt in seinem Gebrauch\"** (Ludwig Wittgenstein, Philosophical Investigations)\n\n\n- **\"You shall know a word by the company it keeps!\"** (J. R. Firth, A synopsis of linguistic theory 1930–55. In Studies in linguistic analysis, pages 1–32. The Philological Society, Oxford)\n\n\n- **\"What people know when they say that they know a word is not how to recite its dictionary definition &ndash; they know how to use it [...] in everyday discourse.\"** (Miller, George A. (1986). Dictionaries in the mind. Language and Cognitive Processes, 1, 171–185.)\n\n\n- **Distributional hypothesis: difference of meaning correlates with difference of distribution** (Zellig Harris)"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"3c41834e","cell_type":"markdown","source":"## What is the meaning of *bardiwac*?\n\nCan we infer meaning from usage?\n\n- He handed her her glass of <font color='red'>bardiwac</font>.\n\n- Beef dishes are made to complement the <font color='red'>bardiwac</font>s.\n\n- Nigel staggered to his feet, face flushed from too much <font color='red'>bardiwac</font>.\n\n- Malbec, one of the lesser-known <font color='red'>bardiwac</font> grapes, responds well to Australia's sunshine.\n\n- I dined off bread and cheese and this excellent <font color='red'>bardiwac</font>.\n\n- The drinks were delicious: blood-red <font color='red'>bardiwac</font> as well as light, sweet Rhenish."},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"9fda2284","cell_type":"markdown","source":"## What is the meaning of *bardiwac*?\n\nCan we infer meaning from usage?\n\n- He handed her her glass of <font color='olive'>claret</font>.\n\n- Beef dishes are made to complement the <font color='olive'>claret</font>s.\n\n- Nigel staggered to his feet, face flushed from too much <font color='olive'>claret</font>.\n\n- Malbec, one of the lesser-known <font color='olive'>claret</font> grapes, responds well to Australia's sunshine.\n\n- I dined off bread and cheese and this excellent <font color='olive'>claret</font>.\n\n- The drinks were delicious: blood-red <font color='olive'>claret</font> as well as light, sweet Rhenish.\n\n\n(example from http://wordspace.collocations.de/doku.php/course:esslli2021:start)"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"83d9be9f","cell_type":"markdown","source":"## Usage-based semantics\n\n- *vector space semantics* is a version of usage-based semantics\n\n- strengths of this approach:\n   - gradient notion of semantic similarity\n   - principled approach how meanings can be learned\n\n- challenges:\n   - predict what meanings do (remember the Lewis quotation above)\n"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"c6a535fb","cell_type":"markdown","source":"# Desiderata for a theory of meaning\n\n## meaning relations\n\n### synonymy\n\n- *buy* – *purchase*\n\n- *sick* – *ill*\n\n- *cell phone* – *mobile phone*\n\n\n### hyponomy\n\n- *fir* – *conifer*\n- *beetle* – *insect*\n- *water* – *liquid*\n\n"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"78ae40fd","cell_type":"markdown","source":"### antonymy\n\n- *small* – *large*\n- *thick* – *thin*\n- *rich* – *poor*\n\n### semantic complementarity\n\n- *even* – *odd*\n- *unmarried* – *married*\n- *on* – *off*\n"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"13e49f7d","cell_type":"markdown","source":"\n### homonymy\n\n- *bank* (financial institution – edge of a river)\n- *band* (ribbon – group of musicians)\n- *bow* (weapon to shoot projectiles – kind of tied ribbon)\n\n### polysemy\n\n- *bank* (financial institution – building where the institution has a branch – entirety of employees of the financial institution)"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"e30f0722","cell_type":"markdown","source":"## connotations\n\ncultural and/or emotional associations carried by an expression, over and above its descriptive meaning\n\n- *strong-willed* – *pig-headed*\n\n- *childish* – *youthful*\n\n- *skinny* – *lithe* – *thin*\n\n\n## social meaning\n\n- *I loved **surprising** you with Clint Eastwood.*\n- *I loved **surprisin'** you with Clint Eastwood.*\n\nfirst version sounds more sophisticated\n\n- *truck* – *lorry*"},{"metadata":{"slideshow":{"slide_type":"slide"}},"cell_type":"markdown","source":"## compositionality\n\nIf you know what *brown cow* and *black horse* means, you also know what *black cow* and *brown horse* means."},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"ea3709e2","cell_type":"markdown","source":"# Plan for the course\n\n- today: introduction\n- 05/02: from corpora to word vectors\n- 05/07: Latent semantic analysis and dimensionality reduction\n- 05/16: other geometric accounts\n- 05/23: vector embeddings via deep learning\n- 05/30: vector embeddings via deep learning\n- 06/13: behavioral validations\n- 06/20: student presentation\n- 06/27: student presentation\n- 07/04: student presentation\n- 07/11: student presentation\n- 07/18: student presentation\n- 07/25: wrapping up"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"6ef189f0","cell_type":"markdown","source":"## Student projects\n\n- groups of 3-5 students\n- presentation in class\n- if you want 6 CP: write-up during the semester break\n- ideally: combination of theoretical considerations and programming project\n\n## Possible topics\n\n- ambiguity and sense disambiguation in vector space semantics\n- meaning vectors and quantum logic\n- compositionality of meaning vectors\n- multilingual word embeddings\n- ELMO, BERT, GPT3 etc."},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"0525a5eb","cell_type":"markdown","source":"## A thought experiment: deciphering hieroglyphs\n\n<img src=\"_img/hieroglyphs01.svg\" width = \"1700\">\n\n\n(example from http://wordspace.collocations.de/doku.php/course:esslli2021:start)"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"a0cb69d9","cell_type":"markdown","source":"## A thought experiment: deciphering hieroglyphs\n\n<img src=\"_img/hieroglyphs02.svg\" width = \"1600\">\n\n"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"581d1f70","cell_type":"markdown","source":"## A thought experiment: deciphering hieroglyphs\n\n<img src=\"_img/hieroglyphs03.svg\" width = \"1600\">\n\n"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"5b212e00","cell_type":"markdown","source":"## A thought experiment: deciphering hieroglyphs\n\n<img src=\"_img/hieroglyphs04.svg\" width = \"1600\">\n\n"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"aac937d7","cell_type":"markdown","source":"## A thought experiment: deciphering hieroglyphs\n\n<img src=\"_img/hieroglyphs05.svg\" width = \"1600\">\n\n"},{"metadata":{"slideshow":{"slide_type":"slide"},"trusted":true},"id":"d9d64aeb","cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\nM = pd.DataFrame(\n    np.array([\n        [51, 20, 84, 0, 3, 0],\n        [52, 58, 4, 4, 6, 26],\n        [115, 83, 10, 42, 33, 17],\n        [59, 39, 23, 4, 0, 0],\n        [98, 14, 6, 2, 1, 0],\n        [12, 17, 3, 2, 9, 27],\n        [11, 2, 2, 0, 18, 0]\n    ]),\n    ['knife', 'cat', 'dog', 'boat', 'cup', 'pig', 'banana'],\n    ['get', 'see', 'use', 'hear', 'eat', 'kill']\n)","execution_count":null,"outputs":[]},{"metadata":{},"id":"66012b4d","cell_type":"markdown","source":"**co-occurrence matrix** $M$"},{"metadata":{"trusted":true},"id":"6ba1bfe9","cell_type":"code","source":"M","execution_count":null,"outputs":[]},{"metadata":{},"id":"1feecc90","cell_type":"markdown","source":"- row-vector $x_{\\textrm{dog}}$ describes usage of the word *dog* in the corpus"},{"metadata":{"trusted":true},"id":"3a77e244","cell_type":"code","source":"M[2:3]","execution_count":null,"outputs":[]},{"metadata":{},"id":"8626cda8","cell_type":"markdown","source":"- can be seen as coordinates of point in $n$-dimensional Euclidean space"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"b816fcef","cell_type":"markdown","source":"Illustrated for dimensions *get* and *use*:"},{"metadata":{"trusted":true},"id":"f77bf7ef","cell_type":"code","source":"import matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport string\ncmap = cm.get_cmap('Spectral')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"f6eeee4f","cell_type":"code","source":"M1 = M[['get','use']][:4]\nM1","execution_count":null,"outputs":[]},{"metadata":{"slideshow":{"slide_type":"slide"},"trusted":true},"id":"e2d4b48f","cell_type":"code","source":"fig, ax = plt.subplots()\nM1[['get', 'use']].plot('get', 'use', \n                        kind='scatter', \n                        ax=ax, s=120, linewidth=0, c=range(len(M1)), colormap=cmap)\nfor k, v in M1[['get', 'use']].iterrows():\n    ax.annotate(k, v,\n                xytext=(10,-5),\n                textcoords='offset points', \n                family='sans-serif', \n                fontsize=18, \n                color='black')\nplt.xlim([0,130])\nplt.ylim([0,120])\n","execution_count":null,"outputs":[]},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"afc3f6b9","cell_type":"markdown","source":"Spatial proximity is expected to correspond to semantic similarity."},{"metadata":{"trusted":true},"id":"1c42f475","cell_type":"code","source":"from scipy.spatial import distance\n\ndistance.euclidean(M1.loc['dog'].values, M1.loc['cat'].values)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"d7f56946","cell_type":"code","source":"distance.euclidean(M1.loc['dog'].values, M1.loc['boat'].values)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"7ae2958c","cell_type":"code","source":"distance.euclidean(M1.loc['dog'].values, M1.loc['knife'].values)","execution_count":null,"outputs":[]},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"6ff23606","cell_type":"markdown","source":"This doesn't work too well here because the position of a word depends on its frequency of occurrence, which affects the Euclidean distance.\n\nOther distance measure give better results."},{"metadata":{"trusted":true},"id":"e3bf17d7","cell_type":"code","source":"distance.cosine(M1.loc['dog'].values, M1.loc['cat'].values)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"c7a6477c","cell_type":"code","source":"distance.cosine(M1.loc['dog'].values, M1.loc['boat'].values)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"d97b2367","cell_type":"code","source":"distance.cosine(M1.loc['dog'].values, M1.loc['knife'].values)","execution_count":null,"outputs":[]},{"metadata":{},"id":"4524b4a5","cell_type":"markdown","source":"<img src=_img/vectors.svg>"},{"metadata":{"slideshow":{"slide_type":"slide"}},"id":"ef3fcd04","cell_type":"markdown","source":"Some lighthearted info about BERT and relatives\n\nhttps://www.youtube.com/watch?v=-QH8fRhqFHM"},{"metadata":{"trusted":true,"slideshow":{"slide_type":"slide"}},"id":"de2fcc7b","cell_type":"code","source":"!mkdir ../data","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"c67df38b","cell_type":"code","source":"!wget -O ../data/Reviews.csv \"https://unitc-my.sharepoint.com/:x:/g/personal/nwsja01_cloud_uni-tuebingen_de/ESJ8QyqzmxpInK_jMQvQ_LEB9XoRbcw39rFmM6ZAQjrwvA?e=0ZIQgh&download=1\"","execution_count":null,"outputs":[]},{"metadata":{"scrolled":true,"slideshow":{"slide_type":"slide"},"trusted":true},"id":"cbd533dd","cell_type":"code","source":"import nltk\nnltk.download('punkt')\ndf = pd.read_csv(\"../data/Reviews.csv\").iloc[:1000]\ndf","execution_count":null,"outputs":[]},{"metadata":{"scrolled":true,"trusted":true},"id":"dab58b60","cell_type":"code","source":"wordlists = np.array([np.array(nltk.tokenize.word_tokenize(s)) for s in df.Text])\n","execution_count":null,"outputs":[]},{"metadata":{"scrolled":true,"trusted":true},"id":"5ecc5a56","cell_type":"code","source":"freq_dist = nltk.FreqDist()\n","execution_count":null,"outputs":[]},{"metadata":{"slideshow":{"slide_type":"slide"},"trusted":true},"id":"08cea87d","cell_type":"code","source":"for sentence in wordlists:\n    for w in sentence:\n        freq_dist[w.lower()] += 1","execution_count":null,"outputs":[]},{"metadata":{"scrolled":true,"trusted":true},"id":"67107367","cell_type":"code","source":"vocabulary = np.array(list(freq_dist.keys()))\nvocabulary","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"ad16fa83","cell_type":"code","source":"len(vocabulary)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"67ea43d2","cell_type":"code","source":"tdMtx = np.zeros((len(vocabulary), len(wordlists)))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"9a95c96f","cell_type":"code","source":"plt.loglog(sorted(list(freq_dist.values()), reverse=True))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"id":"a11ef360","cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"celltoolbar":"Slideshow","kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"language_info":{"name":"python","version":"3.10.4","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"nbformat":4,"nbformat_minor":5}
>>>>>>> 00d57e8a0481edfff2749d3a9f81117e707676d0
